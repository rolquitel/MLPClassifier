# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MLPClassifier
                                 A QGIS plugin
 Plugin Cuadros de lista
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-17
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Carlos Guzmán
        email                : cmejora63c@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from os import X_OK
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import QgsProject, Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .MLPClassifier_dialog import MLPClassifierDialog
import os.path
from pathlib import Path
from joblib import dump, load
import qgis

from . import util
import sys

from . import mlpc
class MLPClassifier:
    """QGIS Plugin Implementation."""

    ###################################################################################################
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MLPClassifier_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MLP Classifier')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.rnName = 'model'


    ###################################################################################################
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MLPClassifier', message)


    ###################################################################################################
    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    ###################################################################################################
    def initGui(self):
        
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # recuerda que para cambiar el icono del plugin hay que recompilar el archivo de recursos
        icon_path = ':/plugins/MLPClassifier/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MLP Classifier '),
            callback=self.run,
            parent=self.iface.mainWindow())

        # inicializar directorio de trabajo
        prjPath = QgsProject.instance().homePath()
        self.workDir = os.path.join(prjPath, 'MLPClassifier')
        Path(self.workDir).mkdir(parents=True, exist_ok=True)

        # will be set False in run()
        self.first_start = True


    ###################################################################################################
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MLP Classifier'),
                action)
            self.iface.removeToolBarIcon(action)


    ###################################################################################################
    def add_to_list(self):
        # Move items selected to list of trainning caps (RA)       
        itemsb = self.dlg.ltCapasRNA.selectedItems()
        for item in itemsb:
            row = self.dlg.ltCapasRNA.row(item)
            self.dlg.ltCapasRNA.takeItem(row)
            self.dlg.ltCapasRA.addItem(str(item.text()))

        # Habilitar botón para correr el entrenamiento
        if self.dlg.ltCapasRA.count() > 0:
            self.dlg.btEntrenar.setDisabled(False)


    ###################################################################################################
    def rem_from_list(self):
        # Move items selected to list of caps RNA 
        itemsb=self.dlg.ltCapasRA.selectedItems()
        for item in itemsb:
            row=self.dlg.ltCapasRA.row(item )
            self.dlg.ltCapasRA.takeItem(row)
            self.dlg.ltCapasRNA.addItem(str(item.text()))

        # Deshabilitar botón para correr el entrenamiento
        if self.dlg.ltCapasRA.count() == 0:
            self.dlg.btEntrenar.setDisabled(True)

    ###################################################################################################
    def openModel_click(self):
        fname = QFileDialog.getOpenFileName(None, 'Open model',  '.',"All files (*.jpg *.png)")

        print(fname)

    ###################################################################################################
    def run(self):
        
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MLPClassifierDialog()
            self.dlg.btAgregar.clicked.connect(self.add_to_list)
            self.dlg.btQuitar.clicked.connect(self.rem_from_list)
            self.dlg.btEntrenar.clicked.connect(self.run_training)
            self.dlg.btClasificar.clicked.connect(self.run_classify)
            
            sys.stdout = util.Logger(self.dlg.txLog, sys.stdout)
            sys.stderr = util.Logger(self.dlg.txLog, sys.stderr, QColor(255, 0, 0))
 
            self.loadLayers()            
            self.dlg.ltCapasRNA.clear()
            self.dlg.ltCapasRA.clear()
            layers = QgsProject.instance().mapLayers().values()
            for l in layers:
                if l.type() == 0:
                    self.dlg.cbZonasEntrenamiento.addItem(l.name())
                else:
                    self.dlg.ltCapasRNA.addItem(l.name())       
            #self.dlg.listWidget.setSelectionMode(2)

            self.model = None
            self.modelFilename = os.path.join(self.workDir, self.rnName + '.mlp')
            self.dlg.btClasificar.setDisabled(True)
            self.dlg.btEntrenar.setDisabled(True)

            self.dlg.btOpenModel.setIcon(QIcon(":/plugins/MLPClassifier/open.png"))
            self.dlg.btOpenModel.setText('')
            self.dlg.btOpenModel.clicked.connect(self.openModel_click)

        # show the dialog
        self.dlg.show()
       
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        # if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #pass
            #select the first item of the listWiddget RA
            # item1LsRA=self.dlg.ltCapasRA.item(0)
            # if item1LsRA != None :
            #     # Recover layer from layer dictionary
            #     layer = self.lyDic[str(item1LsRA.text())]
            #     # Copy layer and create instance
            #     layer_copyName = layer.name() + "_copy"
            #     layer_copy = layer.clone()
            #     layer_copy.setName(layer_copyName)
            #     QgsProject.instance().addMapLayer(layer_copy)


    ###################################################################################################     
    def loadLayers(self):
        # Fetch the currently loaded layers
        # layers = QgsProject.instance().layerTreeRoot().children()
        # layers=self.iface.mapCanvas().layers()
        layers = QgsProject.instance().mapLayers().values()
        self.lyDic = {}
        for l in layers:
            self.lyDic[l.name()] = l


    ###################################################################################################
    def run_classify(self):
        bands = []
        for i in range(self.dlg.ltCapasRA.count()):
            bands.append(self.dlg.ltCapasRA.item(i).text())

        # if self.model is None:
        #     print('Loading model ... ', end='')
        #     if Path(os.path.join(self.workDir, self.modelFile)).is_file():
        #         self.model = load(os.path.join(self.workDir, self.modelFile))
        #         self.classes = 4
        #         print('Ok.')
        #     else:
        #         print('Model was not found.')
        #         return

        # zero = self.cl.predict([[0,0,0,0]])
        # print(zero)

        mse = self.cl.test(self.sp.test_inputs, self.sp.test_outputs)
        if mse < self.dlg.sbMaxError.value():
            self.cl.classify(self.workDir, bands, self.tifFile)

            rlayer = qgis.core.QgsRasterLayer(os.path.join(self.workDir,self.tifFile), 'result')
            QgsProject.instance().addMapLayer(rlayer)
        else:
            print('Classify cannot be performed, due to error is larger than', self.dlg.sbMaxError.value()) 


    ###################################################################################################
    def run_training(self):
        name = self.dlg.txNombreSalida.text()
        self.modelFile = name + '_modelo.mlp'
        self.tifFile = name + '_resultado'

        shape = util.get_shape(self.dlg.txShape.text())
        if shape is None:
            QMessageBox.about(None, "Error", "Shape of hidden layers is not recognized")
            return

        self.testSize = float(self.dlg.sbPctControl.value())
        self.testSize = self.testSize / 100
        # Get raster bands
        bands = []
        for i in range(self.dlg.ltCapasRA.count()):
            bands.append(self.dlg.ltCapasRA.item(i).text())

        print('Bandas', bands)

        # Get training layer
        trainLayer = self.dlg.cbZonasEntrenamiento.currentText() + '.shp'
        print('Training layer', trainLayer)

        self.dlg.btClasificar.setDisabled(False)

        self.sp = mlpc.Sampler(self.workDir, trainLayer, bands)
        self.sp.getTrainingData()
        self.sp.splitData(self.testSize)

        print('Run training...')
        print('Shape of NN: ', shape)
        print('Max iterations: ', self.dlg.sbMaxIter.value())
        print('Learning rate: ', self.dlg.sbLearningRate.value())

        self.cl = mlpc.MLPR_Classifier(
            self.sp.classes, 
            shape, 
            max_iter=self.dlg.sbMaxIter.value(), 
            learning_rate=self.dlg.sbLearningRate.value())
        self.cl.training(self.sp.train_inputs, self.sp.train_outputs)  

        print('Saving model ... ', end='')
        self.cl.save(os.path.join(self.workDir, self.modelFile))
        print('Ok.')


